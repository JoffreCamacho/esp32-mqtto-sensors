//For ATRIUM CDR with love by Joffre Camacho - 2023
//#include <gpio_viewer.h>
#include <WiFi.h>
#include <ESPmDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <PubSubClient.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <ArduinoJson.h>
#include <NewPing.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include "config.h"

//#include <driver/adc.h>
// 21 SCL 22 SDA [DER]
// GPIO [23*,22*,1,3,21*,19,18*,5,17,16,4,0,2,15,8,7,6][DER]
// GPIO [36*,39*,34*,35*,32*,33-,25-,26*,27-,14*,12,13,9,10,11][IZQ]
// AVAILABLE [1,3,19,5,17,16,4,0,2,15,8,7,6,12,13,9,10,11]

// #define ECHO_PIN 18              // HC-SR04 Define echo - 5v [DER] [SD3/GPIO10]
// #define TRIGGER_PIN 23           // HC-SR04 Define trigger - 3.3v [STB][DER][IO15/GPIO15]
// #define RELAY2_PIN 25            // Light Relay control - 3.3v [DER][IO0/GPIO0]
// #define ONE_WIRE_BUS1 26         // DS18B20 Sensor 1 - 3.3v [CHECK][IZQ][IO4/GPIO4]
// #define ONE_WIRE_BUS2 14         // DS18B20 Sensor 2 - 3.3v (Choose an appropriate pin)[IZQ]
// #define RELAY_PIN 27             // Pump Relay control - 5v [IZQ*]
// #define TURBIDITY_SENSOR_PIN 13  // Turbidity sensor - 5v [STB] [ADC14][IZQ]
// #define RELAY3_PIN 33            // Heater Relay control - 5v[IZQ*]
// #define LIGHT_SENSOR_PIN 12      // LX1972 light sensor - 3.3v [STB][ADC15][IZQ]
// #define TDS_SENSOR_PIN 35        // TDS_Sensor - 3.3v [STB] [ADC7][IZQ]
// #define CO2_SENSOR_PIN 36        // MS1100 CO2 sensor - 5v [IZQ]
// #define PH_SENSOR_PIN 39         // PH-014 sensor - 5v [ADC3][IZQ]
// #define SEALEVELPRESSURE_HPA (1010.01)
// #define MAX_SENSOR_VALUE 4095  // max value for a 12-bit ADC
// #define MAX_RETRIES 5

// // Define the maximum and minimum distance for the tank
// #define MAX_DISTANCE 109.22     // Maximum distance from the sensor to the bottom of the tank (empty tank)
// #define MIN_TANK_DISTANCE 70.0  // Minimum distance from the sensor to the bottom of the tank (full tank)

// Using const instead
const int ECHO_PIN = 18;
const int TRIGGER_PIN = 23;

// Similarly, for other constants
const int RELAY2_PIN = 25;
const int ONE_WIRE_BUS1 = 26;
const int ONE_WIRE_BUS2 = 14;
const int RELAY_PIN = 27;
const int TURBIDITY_SENSOR_PIN = 13;
const int RELAY3_PIN = 33;
const int LIGHT_SENSOR_PIN = 12;
const int TDS_SENSOR_PIN = 35;
const int CO2_SENSOR_PIN = 36;
const int PH_SENSOR_PIN = 39;
const float SEALEVELPRESSURE_HPA = 1010.01;
const int MAX_SENSOR_VALUE = 4095;
const int MAX_RETRIES = 5;

// For constants representing distances
const float MAX_DISTANCE = 109.22;
const float MIN_TANK_DISTANCE = 70.0;

Adafruit_BME280 bme;  // I2C interface for BME280
//OneWire oneWire(ONE_WIRE_BUS);
OneWire oneWire1(ONE_WIRE_BUS1);
OneWire oneWire2(ONE_WIRE_BUS2);

DallasTemperature sensors1(&oneWire1);
DallasTemperature sensors2(&oneWire2);
WiFiClient wClient;
PubSubClient mqttClient(wClient);

bool relayState = false;     // Variable to store the state of the relay
bool relay2State = false;    // Variable to store the state of the second relay
bool relay3State = false;    // Variable to store the state of the third relay
bool mqttConnected = false;  // Variable to track MQTT connection status

NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);  // NewPing setup

void setup() {
  Serial.begin(115200);
  Serial.println("Booting");
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  // while (WiFi.waitForConnectResult() != WL_CONNECTED) {
  //   Serial.println("Connection Failed! Rebooting...");
  //   delay(5000);
  //   ESP.restart();
  // }

  // In the setup, improve WiFi connection logic with retries
  int retries = 0;
  while (WiFi.waitForConnectResult() != WL_CONNECTED && retries < MAX_RETRIES) {
    Serial.println("Connection Failed! Retrying...");
    delay(5000);
    WiFi.begin(ssid, password);
    retries++;
  }
  if (retries >= MAX_RETRIES) {
    Serial.println("Failed to connect to WiFi. Check configuration.");
    ESP.restart();
    // Handle error (e.g., enter deep sleep, blink an LED, etc.)
  }


  ArduinoOTA
    .onStart([]() {
      String type;
      if (ArduinoOTA.getCommand() == U_FLASH)
        type = "sketch";
      else
        type = "filesystem";
      Serial.println("Start updating: ");
    })
    .onEnd([]() {
      Serial.println("\nEnd");
    })
    .onProgress([](unsigned int progress, unsigned int total) {
      Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
    })
    .onError([](ota_error_t error) {
      Serial.printf("Error[%u]: ", error);
      if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
      else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
      else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
      else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
      else if (error == OTA_END_ERROR) Serial.println("End Failed");
    });

  ArduinoOTA.begin();

  Serial.println("Ready");
  Serial.print("IP address: ");
  //addLog(WiFi.localIP());
  IPAddress ip = WiFi.localIP();
  String ipString = ip.toString();

  mqttClient.setServer(mqttServer, mqttPort);
  mqttClient.setCallback(mqttCallback);

  bme.begin(0x76);
  sensors1.begin();
  sensors2.begin();

  pinMode(RELAY_PIN, OUTPUT);
  pinMode(RELAY2_PIN, OUTPUT);
  pinMode(RELAY3_PIN, OUTPUT);
  analogReadResolution(12);
  // digitalWrite(RELAY_PIN, HIGH); // Ensure relay starts off
  // digitalWrite(RELAY2_PIN, HIGH); // Ensure relay starts off
  // digitalWrite(RELAY3_PIN, HIGH); // Ensure relay starts off
  pinMode(LIGHT_SENSOR_PIN, INPUT);  //this can create idm
  pinMode(CO2_SENSOR_PIN, INPUT);
  pinMode(PH_SENSOR_PIN, INPUT);
  // Set analog mode for the pins
  // analogSetPinAttenuation(TURBIDITY_SENSOR_PIN, ADC_11db); // For 3.3V max
  // analogSetPinAttenuation(TDS_SENSOR_PIN, ADC_11db);
  // analogSetPinAttenuation(LIGHT_SENSOR_PIN, ADC_11db);
  // Set the pins for the sensors as inputs with pull-down resistors
  // pinMode(TURBIDITY_SENSOR_PIN, INPUT_PULLDOWN);
  // pinMode(TDS_SENSOR_PIN, INPUT_PULLDOWN);
  // pinMode(LIGHT_SENSOR_PIN, INPUT_PULLDOWN);
}

void mqttCallback(char* topic, byte* payload, unsigned int length) {
  Serial.println("Entered mqttCallback");
  String message = "";
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }

  Serial.println("Message: " + message);

  // Depending on the topic, control the corresponding relay
  if (String(topic) == "esp32/relay1") {
    if (message == "on") {
      digitalWrite(RELAY_PIN, LOW);
      relayState = true;
      Serial.println("Relay 1 turned on");
    } else if (message == "off") {
      digitalWrite(RELAY_PIN, HIGH);
      relayState = false;
      Serial.println("Relay 1 turned off");
    }
  } else if (String(topic) == "esp32/relay2") {
    if (message == "on") {
      digitalWrite(RELAY2_PIN, LOW);
      relay2State = true;
      Serial.println("Relay 2 turned on");
    } else if (message == "off") {
      digitalWrite(RELAY2_PIN, HIGH);
      relay2State = false;
      Serial.println("Relay 2 turned off");
    }
  } else if (String(topic) == "esp32/relay3") {
    if (message == "on") {
      digitalWrite(RELAY3_PIN, LOW);
      relay3State = true;
      Serial.println("Relay 3 turned on");
    } else if (message == "off") {
      digitalWrite(RELAY3_PIN, HIGH);
      relay3State = false;
      Serial.println("Relay 3 turned off");
    }
  }
}

void connectToMqtt() {
  //Serial.println("Entered connectToMqtt");
  while (!mqttClient.connected()) {
    Serial.println("Connecting to MQTT server...");
    if (mqttClient.connect("ESP32Client")) {
      Serial.print("Connected to MQTT server ");
      mqttClient.subscribe("esp32/relay1");
      mqttClient.subscribe("esp32/relay2");
      mqttClient.subscribe("esp32/relay3");
      mqttConnected = true;  // Update connection status
    } else {
      Serial.print("Failed to connect to MQTT server, rc=");
      Serial.print(mqttClient.state());
      Serial.print(" Retrying in 5 seconds...");
      delay(5000);
    }
  }
}

void loop() {

  if (!mqttConnected) {
    connectToMqtt();
  }
  mqttClient.loop();
  ArduinoOTA.handle();

  // Read temperature
  sensors1.requestTemperatures();
  float temperatureC1 = sensors1.getTempCByIndex(0);  // Temperature from sensor on ONE_WIRE_BUS1 WATER

  sensors2.requestTemperatures();
  float temperatureC2 = sensors2.getTempCByIndex(0);  // Temperature from sensor on ONE_WIRE_BUS2 BOX

  // Initialize variables for BME280 data
  float bmeTemperature = -99.0;  // Default value if sensor is not detected
  float pressure = -99.0;        // Default value if sensor is not detected
  float humidity = -99.0;        // Default value if sensor is not detected

  // Do not reinitialize; just read from the sensor
  bmeTemperature = bme.readTemperature();
  pressure = bme.readPressure();
  humidity = bme.readHumidity();

  // Multisampling for analog sensors
  const int numSamples = 10;  // Number of samples to take
  int lightIntensity = 0;
  int turbidity = 0;
  int tdsValue = 0;
  int CO2 = 0;
  int phValue = 0;

  // Take multiple samples and sum the readings
  for (int i = 0; i < numSamples; i++) {
    lightIntensity += analogRead(LIGHT_SENSOR_PIN);
    turbidity += analogRead(TURBIDITY_SENSOR_PIN);
    tdsValue += analogRead(TDS_SENSOR_PIN);
    CO2 += analogRead(CO2_SENSOR_PIN);
    phValue += analogRead(PH_SENSOR_PIN);
    delay(10);  // Delay between samples (adjust if necessary)
  }
  // Read light intensity
  //int lightIntensity = analogRead(LIGHT_SENSOR_PIN);
  // Get Turbidity
  //int turbidity = analogRead(TURBIDITY_SENSOR_PIN);
  // Get TDS
  //int tdsValue = analogRead(TDS_SENSOR_PIN);
  // Read CO2 sensor value
  //int CO2 = analogRead(CO2_SENSOR_PIN);
  // Read PH sensor value
  //int phValue = analogRead(PH_SENSOR_PIN);
  // Send ping, get ping time in microseconds (uS).
  // Calculate average by dividing the sum by the number of samples
  lightIntensity /= numSamples;
  turbidity /= numSamples;
  tdsValue /= numSamples;
  CO2 /= numSamples;
  phValue /= numSamples;
  unsigned int uS = sonar.ping();
  float distance = uS / US_ROUNDTRIP_CM;  // Convert ping time to distance in cm
  // Get ESP32 MAC address
  String macAddress = WiFi.macAddress();
  // Create JSON document
  StaticJsonDocument<220> doc;
  //DynamicJsonDocument doc(220);
  doc["macAddress"] = macAddress;
  doc["temperatureC1"] = temperatureC1;  // Tank
  doc["temperatureC2"] = temperatureC2;  // Box temperature in Celsius
  doc["bmeTemperature"] = bmeTemperature;
  doc["pressure"] = pressure;
  doc["humidity"] = humidity;
  doc["lightIntensity"] = lightIntensity;
  doc["turbidity"] = turbidity;
  doc["tds"] = tdsValue;
  doc["CO2"] = CO2;
  doc["phValue"] = phValue;  // Include PH value in JSON
  doc["distance"] = distance;
  // doc["relayState"] = relayState;    // Include relay state in JSON
  // doc["relay2State"] = relay2State;  // Include second relay state in JSON
  //doc["relay3State"] = relay3State;  // Include third relay state in JSON
  //Se puede actualizar el codigo via Wifi al ESP32
  char jsonBuffer[512];
  serializeJson(doc, jsonBuffer);  // Serialize the JSON document
  if (mqttConnected) {
    mqttClient.publish("esp32/sensorData", jsonBuffer);
  }


  //Serial.print("MAC Address: ");
  //Serial.println(macAddress);
  Serial.print("JSON: ");
  Serial.println(jsonBuffer);
  // Serial.print("CO2 Value: ");
  // Serial.println(CO2);

  delay(2000);  // Delay for 2 seconds (must not be higher that 5 or OTA will not work)
}
