//For ATRIUM CDR with love by Joffre Camacho - 2023
//#include <gpio_viewer.h>
#include <WiFi.h>
#include <ESPmDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <PubSubClient.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <ArduinoJson.h>
#include <NewPing.h>
#include <ESPAsyncWebSrv.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <driver/adc.h>

// 21 SCL 22 SDA

#define OE_PIN 5                 // TXS0108E Enable
#define ECHO_PIN 18              // HC-SR04 Define echo - 5v
#define TRIGGER_PIN 23           // HC-SR04 Define trigger - 3.3v [STB]
#define RELAY2_PIN 25            // Light Relay control - 3.3v
//#define ONE_WIRE_BUS 26        // DS18B20 - 3.3v
#define ONE_WIRE_BUS1 26         // DS18B20 Sensor 1 - 3.3v [CHECK]
#define ONE_WIRE_BUS2 14         // DS18B20 Sensor 2 - 3.3v (Choose an appropriate pin)
#define RELAY_PIN 27             // Pump Relay control - 5v
#define TURBIDITY_SENSOR_PIN 32  // Turbidity sensor - 5v [STB]
#define RELAY3_PIN 33            // Heater Relay control - 5v
#define LIGHT_SENSOR_PIN 34      // LX1972 light sensor - 3.3v [STB]
#define TDS_SENSOR_PIN 35        // TDS_Sensor - 3.3v [STB]
#define CO2_SENSOR_PIN 36        // MS1100 CO2 sensor - 5v
#define PH_SENSOR_PIN 39         // PH-014 sensor - 5v
#define SEALEVELPRESSURE_HPA (1010.01)
#define MAX_SENSOR_VALUE 4095  // max value for a 12-bit ADC

// Define the maximum and minimum distance for the tank
#define MAX_DISTANCE 109.22 // Maximum distance from the sensor to the bottom of the tank (empty tank)
#define MIN_TANK_DISTANCE 70.0   // Minimum distance from the sensor to the bottom of the tank (full tank)

Adafruit_BME280 bme;  // I2C interface for BME280
//OneWire oneWire(ONE_WIRE_BUS);
OneWire oneWire1(ONE_WIRE_BUS1);
OneWire oneWire2(ONE_WIRE_BUS2);

DallasTemperature sensors1(&oneWire1);
DallasTemperature sensors2(&oneWire2);

const char* ssid = "NETGEAR92";
const char* password = "rockycream207";
const char* mqttServer = "192.168.2.113";
const int mqttPort = 1883;

WiFiClient wClient;
PubSubClient mqttClient(wClient);

bool relayState = false;   // Variable to store the state of the relay
bool relay2State = false;  // Variable to store the state of the second relay
bool relay3State = false;  // Variable to store the state of the third relay

NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);  // NewPing setup

void setup() {
  Serial.begin(115200);
  Serial.println("Booting");
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  //setupWebServer();  // Setup the web server
  while (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("Connection Failed! Rebooting...");
    delay(5000);
    ESP.restart();
  }

  ArduinoOTA
    .onStart([]() {
      String type;
      if (ArduinoOTA.getCommand() == U_FLASH)
        type = "sketch";
      else
        type = "filesystem";
      Serial.println("Start updating: ");
    })
    .onEnd([]() {
      Serial.println("\nEnd");
    })
    .onProgress([](unsigned int progress, unsigned int total) {
      Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
    })
    .onError([](ota_error_t error) {
      Serial.printf("Error[%u]: ", error);
      if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
      else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
      else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
      else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
      else if (error == OTA_END_ERROR) Serial.println("End Failed");
    });

  ArduinoOTA.begin();

  Serial.println("Ready");
  Serial.print("IP address: ");
  //addLog(WiFi.localIP());
  IPAddress ip = WiFi.localIP();
  String ipString = ip.toString();

  mqttClient.setServer(mqttServer, mqttPort);
  mqttClient.setCallback(mqttCallback);

  bme.begin(0x76);
  sensors1.begin();
  sensors2.begin();
  pinMode(LIGHT_SENSOR_PIN, INPUT); //this can create idm
  pinMode(RELAY_PIN, OUTPUT);
  pinMode(RELAY2_PIN, OUTPUT);
  pinMode(RELAY3_PIN, OUTPUT);
  analogReadResolution(12);
  pinMode(CO2_SENSOR_PIN, INPUT);
  pinMode(PH_SENSOR_PIN, INPUT);
  digitalWrite(RELAY_PIN, HIGH); // Ensure relay starts off
  digitalWrite(RELAY2_PIN, HIGH); // Ensure relay starts off
  digitalWrite(RELAY3_PIN, HIGH); // Ensure relay starts off
  //gpio_viewer.begin();
  
  // Set the pins for the sensors as inputs with pull-down resistors
  //pinMode(TURBIDITY_SENSOR_PIN, INPUT_PULLDOWN);
  //pinMode(TDS_SENSOR_PIN, INPUT_PULLDOWN);
  //pinMode(LIGHT_SENSOR_PIN, INPUT_PULLDOWN);
}

void mqttCallback(char* topic, byte* payload, unsigned int length) {
  Serial.println("Entered mqttCallback");
  String message = "";
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }

  Serial.println("Message: " + message);

  // Depending on the topic, control the corresponding relay
  if (String(topic) == "esp32/relay1") {
    if (message == "on") {
      digitalWrite(RELAY_PIN, LOW);
      relayState = true;
      Serial.println("Relay 1 turned on");
    } else if (message == "off") {
      digitalWrite(RELAY_PIN, HIGH);
      relayState = false;
      Serial.println("Relay 1 turned off");
    }
  } else if (String(topic) == "esp32/relay2") {
    if (message == "on") {
      digitalWrite(RELAY2_PIN, LOW);
      relay2State = true;
      Serial.println("Relay 2 turned on");
    } else if (message == "off") {
      digitalWrite(RELAY2_PIN, HIGH);
      relay2State = false;
      Serial.println("Relay 2 turned off");
    }
  } else if (String(topic) == "esp32/relay3") {
    if (message == "on") {
      digitalWrite(RELAY3_PIN, LOW);
      relay3State = true;
      Serial.println("Relay 3 turned on");
    } else if (message == "off") {
      digitalWrite(RELAY3_PIN, HIGH);
      relay3State = false;
      Serial.println("Relay 3 turned off");
    }
  }
}

void connectToMqtt() {
  Serial.println("Entered connectToMqtt");
  while (!mqttClient.connected()) {
    Serial.println("Connecting to MQTT server...");
    if (mqttClient.connect("ESP32Client")) {
      Serial.print("Connected to MQTT server");
      mqttClient.subscribe("esp32/relay1");
      mqttClient.subscribe("esp32/relay2");
      mqttClient.subscribe("esp32/relay3");
    } else {
      Serial.print("Failed to connect to MQTT server, rc=");
      Serial.print(mqttClient.state());
      Serial.print(" Retrying in 5 seconds...");
      delay(5000);
    }
  }
}

void loop() {

  if (!mqttClient.connected()) {
    connectToMqtt();
  }
  mqttClient.loop();
  ArduinoOTA.handle();

  // Read temperature
  sensors1.requestTemperatures(); 
  float temperatureC1 = sensors1.getTempCByIndex(0); // Temperature from sensor on ONE_WIRE_BUS1 WATER
  
  sensors2.requestTemperatures(); 
  float temperatureC2 = sensors2.getTempCByIndex(0); // Temperature from sensor on ONE_WIRE_BUS2 BOX

    // Initialize variables for BME280 data
  float bmeTemperature = -999.0;  // Default value if sensor is not detected
  float pressure = -999.0;        // Default value if sensor is not detected
  float humidity = -999.0;        // Default value if sensor is not detected

  // Do not reinitialize; just read from the sensor
  bmeTemperature = bme.readTemperature();
  pressure = bme.readPressure();
  humidity = bme.readHumidity();

  // Read light intensity
  int lightIntensity = analogRead(LIGHT_SENSOR_PIN);

  // Get ESP32 MAC address
  String macAddress = WiFi.macAddress();

  // Get Turbidity
  int turbidity = analogRead(TURBIDITY_SENSOR_PIN);

  // Get TDS
  int tdsValue = analogRead(TDS_SENSOR_PIN);

  // Read CO2 sensor value
  int CO2 = analogRead(CO2_SENSOR_PIN);

  // Read PH sensor value
  int phValue = analogRead(PH_SENSOR_PIN);

  // Send ping, get ping time in microseconds (uS).
  unsigned int uS = sonar.ping();
  float distance = uS / US_ROUNDTRIP_CM;  // Convert ping time to distance in cm



  // Create JSON document
  StaticJsonDocument<220> doc;
  doc["macAddress"] = macAddress;
  doc["temperatureC1"] = temperatureC1;    // Tank
  doc["temperatureC2"] = temperatureC2;  // Box temperature in Celsius
  doc["bmeTemperature"] = bmeTemperature;
  doc["pressure"] = pressure;
  doc["humidity"] = humidity;
  doc["lightIntensity"] = lightIntensity;
  doc["turbidity"] = turbidity;
  doc["tds"] = tdsValue;
  doc["CO2"] = CO2;
  doc["phValue"] = phValue;  // Include PH value in JSON
  doc["distance"] = distance;
  doc["relayState"] = relayState;    // Include relay state in JSON
  doc["relay2State"] = relay2State;  // Include second relay state in JSON
  doc["relay3State"] = relay3State;  // Include third relay state in JSON

  //Se puede actualizar el codigo via Wifi al ESP32

  char jsonBuffer[512];
  serializeJson(doc, jsonBuffer);  // Serialize the JSON document

  mqttClient.publish("esp32/sensorData", jsonBuffer);
 
  delay(2000);  // Delay for 2 seconds (must not be higher that 5 or OTA will not work)
}
