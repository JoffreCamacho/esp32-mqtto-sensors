//For ATRIUM CDR with love by Joffre Camacho - 2023

#include <WiFi.h>
#include <ESPmDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <PubSubClient.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <ArduinoJson.h>

#define ONE_WIRE_BUS 26 // DS18B20 pin
#define RELAY_PIN 27 // Relay control pin
#define TURBIDITY_SENSOR_PIN 32 // change this to the pin you've connected the sensor to
#define MAX_SENSOR_VALUE 4095 // max value for a 12-bit ADC
#define LIGHT_SENSOR_PIN 34 // LX1972 light sensor pin

OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

const char* ssid = "NETGEAR92";
const char* password = "rockycream207";
const char* mqttServer = "192.168.2.113";
const int mqttPort = 1883;

WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);

bool relayState = false; // Variable to store the state of the relay

void setup() {
  Serial.begin(115200);
  Serial.println("Booting");

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  
  while (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("Connection Failed! Rebooting...");
    delay(5000);
    ESP.restart();
  }

  ArduinoOTA
    .onStart([]() {
      String type;
      if (ArduinoOTA.getCommand() == U_FLASH)
        type = "sketch";
      else 
        type = "filesystem";
      Serial.println("Start updating " + type);
    })
    .onEnd([]() {
      Serial.println("\nEnd");
    })
    .onProgress([](unsigned int progress, unsigned int total) {
      Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
    })
    .onError([](ota_error_t error) {
      Serial.printf("Error[%u]: ", error);
      if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
      else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
      else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
      else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
      else if (error == OTA_END_ERROR) Serial.println("End Failed");
    });

  ArduinoOTA.begin();

  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  mqttClient.setServer(mqttServer, mqttPort);
  mqttClient.setCallback(mqttCallback);

  sensors.begin(); // Initialize DS18B20 sensor
  pinMode(LIGHT_SENSOR_PIN, INPUT); // Initialize LX1972 light sensor
  pinMode(RELAY_PIN, OUTPUT); // Set relay pin as output
  analogReadResolution(12); // ESP32 has 12-bit resolution

}

void mqttCallback(char* topic, byte* payload, unsigned int length) {
  Serial.println("Entered mqttCallback");
  String message = "";
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }

  Serial.println("Message: " + message);
  
  if (message == "on") {
    digitalWrite(RELAY_PIN, HIGH); // Turn on relay
    relayState = true; // Update relay state
    Serial.println("Relay turned on");
  } else if (message == "off") {
    digitalWrite(RELAY_PIN, LOW); // Turn off relay
    relayState = false; // Update relay state
    Serial.println("Relay turned off");
  }
}

void connectToMqtt() {
  Serial.println("Entered connectToMqtt");
  while (!mqttClient.connected()) {
    Serial.println("Connecting to MQTT server...");
    if (mqttClient.connect("ESP32Client")) {
      Serial.println("Connected to MQTT server");
      mqttClient.subscribe("esp32/relay"); // Subscribe to relay topic
    } else {
      Serial.print("Failed to connect to MQTT server, rc=");
      Serial.print(mqttClient.state());
      Serial.println(" Retrying in 5 seconds...");
      delay(5000);
    }
  }
}

void loop() {
  Serial.print("Free memory: ");
  Serial.println(ESP.getFreeHeap());
  if (!mqttClient.connected()) {
    connectToMqtt();
  }
  mqttClient.loop();
  ArduinoOTA.handle();

  // Read temperature
  sensors.requestTemperatures();
  float temperatureC = sensors.getTempCByIndex(0);

  // Read light intensity
  int lightIntensity = analogRead(LIGHT_SENSOR_PIN);

  // Get ESP32 MAC address
  String macAddress = WiFi.macAddress();

  // Get Turbidity
  int sensorValue = analogRead(TURBIDITY_SENSOR_PIN);
  int turbidity = MAX_SENSOR_VALUE - sensorValue; // invert the reading
  
  // Create JSON document
  StaticJsonDocument<200> doc;
  doc["macAddress"] = macAddress;
  doc["temperatureC"] = temperatureC;
  doc["lightIntensity"] = lightIntensity;
  doc["turbidity"]= turbidity;
  doc["relayState"] = relayState; // Include relay state in JSON
  
  char jsonBuffer[512];
  serializeJson(doc, jsonBuffer); // Serialize the JSON document

  mqttClient.publish("esp32/sensorData", jsonBuffer);
  Serial.print("Temperature: ");
  Serial.print(temperatureC);
  Serial.println(" C");
  Serial.print("Light Intensity: ");
  Serial.println(lightIntensity);
  Serial.print("Sensor Value: ");
  Serial.println(turbidity);
  Serial.print("MAC Address: ");
  Serial.println(macAddress);
  Serial.print("Relay State: ");
  Serial.println(relayState);

  delay(2000); // Delay for 2 seconds (must not be higher that 5 or OTA will not work)
}
